<!-- realTimeProducts.handlebars -->
<h1>Lista de Productos en Tiempo Real</h1>
<ul id="product-list">
  {{#each products}}
    <li>
      {{this.title}} - Precio: {{this.price}}
      <form class="add-to-cart-form">
        <input type="hidden" name="productId" value="{{this.id}}">
        <label for="quantity">Cantidad:</label>
        <input type="number" name="quantity" value="1" min="1" max="{{this.stock}}" required>
        <button type="submit">Agregar al carrito</button>
        <span>Subtotal: $<span class="subtotal">{{this.price}}</span></span>
      </form>
    </li>
  {{/each}}
</ul>

<form id="add-product-form">
  <!-- Agregar campos del formulario para agregar productos -->
  <label for="title">Título:</label>
  <input type="text" id="title" name="title" required>
  <label for="price">Precio:</label>
  <input type="number" id="price" name="price" required>
  <!-- Agregar otros campos del formulario aquí -->
  <button type="submit">Agregar Producto</button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  // Escuchar eventos de actualización de productos
  socket.on('productAdded', (product) => {
    const productList = document.getElementById('product-list');
    const newItem = document.createElement('li');
    newItem.innerHTML = `
      ${product.title} - Precio: ${product.price}
      <form class="add-to-cart-form">
        <input type="hidden" name="productId" value="${product.id}">
        <label for="quantity">Cantidad:</label>
        <input type="number" name="quantity" value="1" min="1" max="${product.stock}" required>
        <button type="submit">Agregar al carrito</button>
        <span>Subtotal: $<span class="subtotal">${product.price}</span></span>
      </form>
    `;
    productList.appendChild(newItem);
  });

  // Manejar envío de formulario para agregar productos
  document.getElementById('add-product-form').addEventListener('submit', (event) => {
    event.preventDefault();
    const title = document.getElementById('title').value;
    const price = parseFloat(document.getElementById('price').value);
    // Obtener otros datos del formulario

    const newProduct = { title, price /* otros campos */ };
    socket.emit('addProduct', newProduct);

    // Limpiar campos del formulario
    document.getElementById('title').value = '';
    document.getElementById('price').value = '';
    // Limpiar otros campos del formulario
  });

  // Escuchar envío de formulario para agregar al carrito
  document.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (event.target.classList.contains('add-to-cart-form')) {
      const formData = new FormData(event.target);
      const productId = formData.get('productId');
      const quantity = parseInt(formData.get('quantity'));
      const product = products.find((p) => p.id === parseInt(productId));
      if (product) {
        const subtotal = product.price * quantity;
        const subtotalElement = event.target.querySelector('.subtotal');
        subtotalElement.textContent = subtotal;
      }
    }
  });
</script>







